{
    # This is a comment line (non-standard in JSON formatted data)
    # Comment lines ( '#' as first non-whitespace character on a line) are
    # removed by the application that uses this file data
    #
    "configuration_name" : "rn_test1_cfg",
    "comment_list" : {
        "comment_1" : "configuration file in JSON notation for the MQTT Scraper application",
        "comment_2" : "2025-May-20 RN thenbomr@gmail.com",
        "comment_3" : "2025-May-28 RN Work in progress <git@github.com:theNbomr/liveGnuplot.git>"
    },

    "metrics" : {
        "111_esp01_temperature" : {
            "source" : {
                #
                #   We should be able to use shortcuts/macros for identifiers: eg: ${metricId}
                #   "mqttsub" : "${metricId}" expands to :
                "mqttsub" : "111_esp01_temperature"
            },
            "sink" : [
                { "file" : "111_esp01_temperature" },
                { "db"   : "111_temp" }
            ]
        },
        #
        #   A metric specifying a non-existant IP:Port, for testing
        #
        "111_esp01_signal" : {
            "source" : {
                "mqttsub" : "111_esp01_signal"
            },
            "sink" : [
                { "file" : "111_esp01_signal" },
                { "pv" : "RN_TEST1_AI1"}
            ]
        },
        "111_d1mini_signal" : {
            "source" : {
                "mqttsub" : "111_d1mini_signal"
            },
            "sink" : [
                { "file" : "111_d1mini_signal" }
            ]
        },
        
        "111_esp32_signal" : {
            "source" : {
                "mqttsub" : "111_esp32_signal"
            },
            "sink" : [
                { "file" : "111_esp32_signal" }
                ,{ "db"  : "esp32_signal" }
            ]
        },

        "116_lr_temp" : {
            "source" : {
                "mqttsub" : "116_lr_temp"
            },       
            "sink" : [
                { "file" : "116_lr_temperature" },
                { "file" : "rnIoT_esp01_temp" },
                { "db" : "esp32_signal" }
            ]
        },

        "111_ioc_heartbeat" : {
            "source" : {
                "epicspv" : "rn_test1_heartbeat"
            },
            "sink" : [
                { "file" : "116_lr_temperature" },
                { "file" : "rnIoT_esp01_temp" },
                { "db" : "esp32_signal" }
            ]
        }
    },

    #  PVs are context sensitive; they are possible sinks and also possible subscriptions.
    #  Q: If we're using JSON syntax for include-file functionality, shouldn't the
    #     semantics follow JSON rules? ie. not on a line-by-line oriented basis?
    #  A: Yup, probably, but it works for now, and it makes [enough] sense for human-maintained files.
    # Pre-include comment
    "include" : { "file" : "pvs.json" },
    # Post-include comment. There should be a blank line following this comment, and then '"metrics" '...
    "junk" : { "any" : "object" },

    "include" : { "file" : "brokers.json" },
    "include" : { "file" : "mqsubs.json" },
    "include" : { "file" : "files.json" },
    "include" : { "file" : "dbs.json" },
    "end" : "of file"
}

